// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_protocal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_5fprotocal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_5fprotocal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_5fprotocal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_5fprotocal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_5fprotocal_2eproto;
class PBindName;
class PBindNameDefaultTypeInternal;
extern PBindNameDefaultTypeInternal _PBindName_default_instance_;
class PChat;
class PChatDefaultTypeInternal;
extern PChatDefaultTypeInternal _PChat_default_instance_;
class pRoomInformation;
class pRoomInformationDefaultTypeInternal;
extern pRoomInformationDefaultTypeInternal _pRoomInformation_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBindName* Arena::CreateMaybeMessage<::PBindName>(Arena*);
template<> ::PChat* Arena::CreateMaybeMessage<::PChat>(Arena*);
template<> ::pRoomInformation* Arena::CreateMaybeMessage<::pRoomInformation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PBindName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBindName) */ {
 public:
  inline PBindName() : PBindName(nullptr) {}
  virtual ~PBindName();

  PBindName(const PBindName& from);
  PBindName(PBindName&& from) noexcept
    : PBindName() {
    *this = ::std::move(from);
  }

  inline PBindName& operator=(const PBindName& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBindName& operator=(PBindName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBindName& default_instance();

  static inline const PBindName* internal_default_instance() {
    return reinterpret_cast<const PBindName*>(
               &_PBindName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBindName& a, PBindName& b) {
    a.Swap(&b);
  }
  inline void Swap(PBindName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBindName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBindName* New() const final {
    return CreateMaybeMessage<PBindName>(nullptr);
  }

  PBindName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBindName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBindName& from);
  void MergeFrom(const PBindName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBindName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBindName";
  }
  protected:
  explicit PBindName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_5fprotocal_2eproto);
    return ::descriptor_table_chat_5fprotocal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:PBindName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_5fprotocal_2eproto;
};
// -------------------------------------------------------------------

class PChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PChat) */ {
 public:
  inline PChat() : PChat(nullptr) {}
  virtual ~PChat();

  PChat(const PChat& from);
  PChat(PChat&& from) noexcept
    : PChat() {
    *this = ::std::move(from);
  }

  inline PChat& operator=(const PChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PChat& operator=(PChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PChat& default_instance();

  static inline const PChat* internal_default_instance() {
    return reinterpret_cast<const PChat*>(
               &_PChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PChat& a, PChat& b) {
    a.Swap(&b);
  }
  inline void Swap(PChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PChat* New() const final {
    return CreateMaybeMessage<PChat>(nullptr);
  }

  PChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PChat& from);
  void MergeFrom(const PChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PChat";
  }
  protected:
  explicit PChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_5fprotocal_2eproto);
    return ::descriptor_table_chat_5fprotocal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInformationFieldNumber = 1,
  };
  // string information = 1;
  void clear_information();
  const std::string& information() const;
  void set_information(const std::string& value);
  void set_information(std::string&& value);
  void set_information(const char* value);
  void set_information(const char* value, size_t size);
  std::string* mutable_information();
  std::string* release_information();
  void set_allocated_information(std::string* information);
  private:
  const std::string& _internal_information() const;
  void _internal_set_information(const std::string& value);
  std::string* _internal_mutable_information();
  public:

  // @@protoc_insertion_point(class_scope:PChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_5fprotocal_2eproto;
};
// -------------------------------------------------------------------

class pRoomInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pRoomInformation) */ {
 public:
  inline pRoomInformation() : pRoomInformation(nullptr) {}
  virtual ~pRoomInformation();

  pRoomInformation(const pRoomInformation& from);
  pRoomInformation(pRoomInformation&& from) noexcept
    : pRoomInformation() {
    *this = ::std::move(from);
  }

  inline pRoomInformation& operator=(const pRoomInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline pRoomInformation& operator=(pRoomInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pRoomInformation& default_instance();

  static inline const pRoomInformation* internal_default_instance() {
    return reinterpret_cast<const pRoomInformation*>(
               &_pRoomInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(pRoomInformation& a, pRoomInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(pRoomInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pRoomInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pRoomInformation* New() const final {
    return CreateMaybeMessage<pRoomInformation>(nullptr);
  }

  pRoomInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pRoomInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pRoomInformation& from);
  void MergeFrom(const pRoomInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pRoomInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pRoomInformation";
  }
  protected:
  explicit pRoomInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_5fprotocal_2eproto);
    return ::descriptor_table_chat_5fprotocal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInformationFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string information = 2;
  void clear_information();
  const std::string& information() const;
  void set_information(const std::string& value);
  void set_information(std::string&& value);
  void set_information(const char* value);
  void set_information(const char* value, size_t size);
  std::string* mutable_information();
  std::string* release_information();
  void set_allocated_information(std::string* information);
  private:
  const std::string& _internal_information() const;
  void _internal_set_information(const std::string& value);
  std::string* _internal_mutable_information();
  public:

  // @@protoc_insertion_point(class_scope:pRoomInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_5fprotocal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBindName

// string name = 1;
inline void PBindName::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBindName::name() const {
  // @@protoc_insertion_point(field_get:PBindName.name)
  return _internal_name();
}
inline void PBindName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PBindName.name)
}
inline std::string* PBindName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PBindName.name)
  return _internal_mutable_name();
}
inline const std::string& PBindName::_internal_name() const {
  return name_.Get();
}
inline void PBindName::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBindName::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBindName.name)
}
inline void PBindName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBindName.name)
}
inline void PBindName::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBindName.name)
}
inline std::string* PBindName::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBindName::release_name() {
  // @@protoc_insertion_point(field_release:PBindName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBindName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBindName.name)
}

// -------------------------------------------------------------------

// PChat

// string information = 1;
inline void PChat::clear_information() {
  information_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PChat::information() const {
  // @@protoc_insertion_point(field_get:PChat.information)
  return _internal_information();
}
inline void PChat::set_information(const std::string& value) {
  _internal_set_information(value);
  // @@protoc_insertion_point(field_set:PChat.information)
}
inline std::string* PChat::mutable_information() {
  // @@protoc_insertion_point(field_mutable:PChat.information)
  return _internal_mutable_information();
}
inline const std::string& PChat::_internal_information() const {
  return information_.Get();
}
inline void PChat::_internal_set_information(const std::string& value) {
  
  information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PChat::set_information(std::string&& value) {
  
  information_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PChat.information)
}
inline void PChat::set_information(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PChat.information)
}
inline void PChat::set_information(const char* value,
    size_t size) {
  
  information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PChat.information)
}
inline std::string* PChat::_internal_mutable_information() {
  
  return information_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PChat::release_information() {
  // @@protoc_insertion_point(field_release:PChat.information)
  return information_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PChat::set_allocated_information(std::string* information) {
  if (information != nullptr) {
    
  } else {
    
  }
  information_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), information,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PChat.information)
}

// -------------------------------------------------------------------

// pRoomInformation

// string name = 1;
inline void pRoomInformation::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pRoomInformation::name() const {
  // @@protoc_insertion_point(field_get:pRoomInformation.name)
  return _internal_name();
}
inline void pRoomInformation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pRoomInformation.name)
}
inline std::string* pRoomInformation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pRoomInformation.name)
  return _internal_mutable_name();
}
inline const std::string& pRoomInformation::_internal_name() const {
  return name_.Get();
}
inline void pRoomInformation::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pRoomInformation::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pRoomInformation.name)
}
inline void pRoomInformation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pRoomInformation.name)
}
inline void pRoomInformation::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pRoomInformation.name)
}
inline std::string* pRoomInformation::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pRoomInformation::release_name() {
  // @@protoc_insertion_point(field_release:pRoomInformation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pRoomInformation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pRoomInformation.name)
}

// string information = 2;
inline void pRoomInformation::clear_information() {
  information_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pRoomInformation::information() const {
  // @@protoc_insertion_point(field_get:pRoomInformation.information)
  return _internal_information();
}
inline void pRoomInformation::set_information(const std::string& value) {
  _internal_set_information(value);
  // @@protoc_insertion_point(field_set:pRoomInformation.information)
}
inline std::string* pRoomInformation::mutable_information() {
  // @@protoc_insertion_point(field_mutable:pRoomInformation.information)
  return _internal_mutable_information();
}
inline const std::string& pRoomInformation::_internal_information() const {
  return information_.Get();
}
inline void pRoomInformation::_internal_set_information(const std::string& value) {
  
  information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pRoomInformation::set_information(std::string&& value) {
  
  information_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pRoomInformation.information)
}
inline void pRoomInformation::set_information(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pRoomInformation.information)
}
inline void pRoomInformation::set_information(const char* value,
    size_t size) {
  
  information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pRoomInformation.information)
}
inline std::string* pRoomInformation::_internal_mutable_information() {
  
  return information_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pRoomInformation::release_information() {
  // @@protoc_insertion_point(field_release:pRoomInformation.information)
  return information_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pRoomInformation::set_allocated_information(std::string* information) {
  if (information != nullptr) {
    
  } else {
    
  }
  information_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), information,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pRoomInformation.information)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_5fprotocal_2eproto
